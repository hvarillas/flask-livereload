#!/usr/bin/env python3
"""
Script de prueba para verificar que Flask-LiveReload se puede importar y usar correctamente
"""

import sys
import traceback
import os


def test_import():
    """Prueba la importaci√≥n de Flask-LiveReload"""
    try:
        from flask_livereload import LiveReload

        print("‚úÖ Flask-LiveReload importado correctamente")
        return True
    except ImportError as e:
        print(f"‚ùå Error importando Flask-LiveReload: {e}")
        return False


def test_basic_usage():
    """Prueba el uso b√°sico de Flask-LiveReload"""
    try:
        from flask import Flask
        from flask_livereload import LiveReload

        # Crear app de prueba
        app = Flask(__name__)
        app.debug = True

        # Inicializar LiveReload
        livereload = LiveReload(app)

        print("‚úÖ Flask-LiveReload inicializado correctamente")
        print("‚úÖ Aplicaci√≥n configurada con √©xito")

        return True
    except Exception as e:
        print(f"‚ùå Error en uso b√°sico: {e}")
        traceback.print_exc()
        return False


def test_configuration():
    """Prueba la configuraci√≥n avanzada"""
    try:
        from flask import Flask
        from flask_livereload import LiveReload

        app = Flask(__name__)
        app.debug = True

        # Probar con patrones de ignorar
        livereload = LiveReload(
            app, ignore_patterns=["__pycache__", ".git", "node_modules"]
        )

        print("‚úÖ Configuraci√≥n avanzada funcionando correctamente")

        return True
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False


def test_custom_patterns():
    """Prueba la configuraci√≥n con patrones personalizados"""
    try:
        from flask import Flask
        from flask_livereload import LiveReload

        app = Flask(__name__)
        app.debug = True

        # Configurar patrones personalizados
        app.config["LIVERELOAD_WATCH_PATTERNS"] = [
            "statics/**/*.html",
            "statics/**/*.js",
            "templates/**/*.html",
        ]
        
        app.config["LIVERELOAD_IGNORE_PATTERNS"] = [
            "__pycache__",
            ".git",
            "*.pyc",
            "node_modules",
        ]

        livereload = LiveReload(app)

        # Verificar que la configuraci√≥n se aplic√≥
        watch_patterns = app.config.get("LIVERELOAD_WATCH_PATTERNS")
        ignore_patterns = app.config.get("LIVERELOAD_IGNORE_PATTERNS")
        
        if watch_patterns and ignore_patterns:
            print("‚úÖ Configuraci√≥n de patrones personalizados aplicada correctamente")
            print(f"   üìã Patrones de observaci√≥n: {len(watch_patterns)}")
            print(f"   üö´ Patrones de ignorar: {len(ignore_patterns)}")
            return True
        else:
            print("‚ö†Ô∏è  Configuraci√≥n de patrones no se aplic√≥ correctamente")
            return False

    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n de patrones personalizados: {e}")
        traceback.print_exc()
        return False


def test_script_injection():
    """Prueba la inyecci√≥n del script de LiveReload"""
    try:
        from flask import Flask, render_template_string
        from flask_livereload import LiveReload

        app = Flask(__name__)
        app.debug = True
        livereload = LiveReload(app)

        with app.test_client() as client:
            # Crear una ruta que devuelva HTML
            @app.route('/test')
            def test_route():
                return render_template_string("<html><body><h1>Test</h1></body></html>")

            # Hacer una petici√≥n
            response = client.get('/test')
            
            # Verificar que el script se inyect√≥
            if b'/_livereload' in response.data and b'EventSource' in response.data:
                print("‚úÖ Script de LiveReload inyectado correctamente")
                return True
            else:
                print("‚ö†Ô∏è  Script de LiveReload no se inyect√≥ correctamente")
                return False

    except Exception as e:
        print(f"‚ùå Error en prueba de inyecci√≥n de script: {e}")
        traceback.print_exc()
        return False


def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ Probando Flask-LiveReload...")
    print("=" * 60)
    print(f"üìÅ Directorio actual: {os.getcwd()}")
    print(f"üêç Versi√≥n de Python: {sys.version}")

    tests = [
        ("Importaci√≥n", test_import),
        ("Uso b√°sico", test_basic_usage),
        ("Configuraci√≥n", test_configuration),
        ("Patrones personalizados", test_custom_patterns),
        ("Inyecci√≥n de script", test_script_injection),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüîç Ejecutando prueba: {test_name}")
        if test_func():
            passed += 1
        else:
            print(f"‚ö†Ô∏è  Prueba '{test_name}' fall√≥")

    print("\n" + "=" * 60)
    print(f"üìä Resultados: {passed}/{total} pruebas pasaron")

    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron!")
        print("\nüí° Flask-LiveReload est√° listo para usar en proyectos externos")
        print("üöÄ Puedes comenzar a desarrollar con recarga autom√°tica")
        return 0
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa la configuraci√≥n.")
        print("üìù Consulta la documentaci√≥n en examples/README.md")
        return 1


if __name__ == "__main__":
    sys.exit(main())
